## OpenTelemetry Collector Standalone Helm Chart Values
## https://github.com/open-telemetry/opentelemetry-helm-charts/tree/main/charts/opentelemetry-collector

# Default values for OpenTelemetry Collector
nameOverride: "otel-cluster-collector"
fullnameOverride: "otel-cluster-collector"

mode: deployment

image:
  repository: otel/opentelemetry-collector-contrib
  tag: "0.121.0"
  pullPolicy: IfNotPresent

resources:
  limits:
    cpu: 1
    memory: 2Gi
  requests:
    cpu: 200m
    memory: 400Mi

serviceAccount:
  create: true
  name: "otel-cluster-collector"

podAnnotations:
  prometheus.io/scrape: "true"
  prometheus.io/port: "8888"

extraEnvs:
  - name: HONEYCOMB_API_KEY
    valueFrom:
      secretKeyRef:
        name: honeycomb-api-key
        key: api-key

# Configuration for ports
ports:
  otlp:
    enabled: true
    containerPort: 4317
    servicePort: 4317
    protocol: TCP
  otlp-http:
    enabled: true
    containerPort: 4318
    servicePort: 4318
    protocol: TCP
  metrics:
    enabled: true
    containerPort: 8888
    servicePort: 8888
    protocol: TCP

service:
  type: ClusterIP

config:
  receivers:
    prometheus:
      config:
        scrape_configs:
          - job_name: "kubernetes-pods"
            kubernetes_sd_configs:
              - role: pod
            relabel_configs:
              - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
                action: keep
                regex: true
              - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
                action: replace
                target_label: __metrics_path__
                regex: (.+)
              - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
                action: replace
                regex: ([^:]+)(?::\d+)?;(\d+)
                replacement: $1:$2
                target_label: __address__
              - action: labelmap
                regex: __meta_kubernetes_pod_label_(.+)
              - source_labels: [__meta_kubernetes_namespace]
                action: replace
                target_label: kubernetes_namespace
              - source_labels: [__meta_kubernetes_pod_name]
                action: replace
                target_label: kubernetes_pod_name
    hostmetrics:
      collection_interval: 60s
      scrapers:
        cpu: {}
        disk: {}
        load: {}
        filesystem: {}
        memory: {}
        network: {}
        paging: {}
        process: {}
    kubeletstats:
      collection_interval: 60s
      auth_type: serviceAccount
      endpoint: ${env:K8S_NODE_NAME}:10250
      insecure_skip_verify: true
      metric_groups:
        - node
        - pod
        - container
        - volume
    otlp:
      protocols:
        grpc:
          endpoint: 0.0.0.0:4317
        http:
          endpoint: 0.0.0.0:4318

  processors:
    memory_limiter:
      check_interval: 1s
      limit_percentage: 75
      spike_limit_percentage: 15
    batch:
      send_batch_size: 10000
      timeout: 10s
    k8sattributes:
      auth_type: serviceAccount
      passthrough: false
      extract:
        metadata:
          - k8s.pod.name
          - k8s.pod.uid
          - k8s.deployment.name
          - k8s.namespace.name
          - k8s.node.name
          - k8s.pod.start_time
    resource:
      attributes:
        - key: service.name
          value: otel-cluster-collector
          action: insert
        - key: k8s.cluster.name
          value: otelbrot
          action: upsert

  exporters:
    otlphttp/lgtm:
      endpoint: http://lgtm-gateway.monitoring.svc.cluster.local:4318
      tls:
        insecure: true
      headers:
        X-Scope-OrgID: "1"
    otlp/honeycomb:
      endpoint: api.honeycomb.io:443
      headers:
        x-honeycomb-team: ${env:HONEYCOMB_API_KEY}
    debug:
      verbosity: detailed

  service:
    pipelines:
      metrics:
        receivers: [prometheus, hostmetrics, kubeletstats]
        processors: [memory_limiter, k8sattributes, resource, batch]
        exporters: [debug, otlphttp/lgtm, otlp/honeycomb]
      traces:
        receivers: [otlp]
        processors: [memory_limiter, k8sattributes, resource, batch]
        exporters: [debug, otlphttp/lgtm, otlp/honeycomb]
      logs:
        receivers: [otlp]
        processors: [memory_limiter, k8sattributes, resource, batch]
        exporters: [debug, otlphttp/lgtm, otlp/honeycomb]